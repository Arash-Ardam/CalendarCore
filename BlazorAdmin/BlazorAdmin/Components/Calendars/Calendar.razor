@page "/calendar"

@using System.Linq;
@using BlazorAdmin.Components.test
@using CalendarDomain
@using Radzen
@using Radzen.Blazor
@inject CalendarApiService service
@rendermode RenderMode.InteractiveServer

<h3>Calendar</h3>

<RadzenCard>
    <RadzenLabel>Select Your Calendar</RadzenLabel>
    <RadzenDropDown Data=@_calendarNames TValue="string" @bind-Value=@_selectedCalendar Change=@CalendarChanged />
</RadzenCard>

@if (!string.IsNullOrEmpty(_selectedCalendar))
{
@inject DialogService DialogService

    <RadzenCard>
        <RadzenScheduler @ref=@scheduler SlotRender=@OnSlotRender style="height: 768px;" TItem="Appointment" LoadData="@OnLoadData" Data=@_events
                         StartProperty="Start" EndProperty="End"
                         TextProperty="Text" SlotSelect=@OnSlotSelect AppointmentRender=@OnAppointmentRender>
            <RadzenYearView />
            <RadzenMonthView />
        </RadzenScheduler>
    </RadzenCard>

}


@code {
    RadzenScheduler<Appointment> scheduler;

    IEnumerable<string> _calendarNames;
    string _selectedCalendar = string.Empty;

    IEnumerable<Appointment> _events;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        _calendarNames = (await service.GetAllCalendarsAsync()).Select(cal => cal.Name);

    }

    void OnSlotRender(SchedulerSlotRenderEventArgs args)
    {


        // Highlight today in month view
        if (args.View.Text == "Month" && args.Start.Date == DateTime.Today)
        {
            args.Attributes["style"] = "background: rgba(255,220,40,.2);";
        }

        if (args.View.Text == "Year" && (_events?.Any(evt => evt.Start == args.Start.Date && evt.IsHoliday) ?? false))
        {
            args.Attributes["class"] = "calendar-core-holiday-slot";
        }

    }

    async Task OnLoadData(SchedulerLoadDataEventArgs args)
    {
        // Get the appointments for between the Start and End

        _events = (await service.GetHolidaysWithPeriodDateAsync(_selectedCalendar, args.Start, args.End))
            .Select(item => new Appointment()
                {
                    Start = item.Date,
                    End = item.Date,
                    Text = item.Description,
                    IsHoliday = item.IsHoliday
                });
            
    }

    async Task OnSlotSelect(SchedulerSlotSelectEventArgs args)
    {

        BlazorAdmin.DateEvent data = await DialogService.OpenAsync<AddEvent>("Add Event");

        if (data != null)
        {
            var entry = new EventDto()
                {
                    Date = data.Date,
                    Description = data.Description,
                    IsHoliday = data.IsHoliday
                };
            await service.AddEventAsync(_selectedCalendar,entry);


            await scheduler.Reload();
        }

    }

    void OnAppointmentRender(SchedulerAppointmentRenderEventArgs<Appointment> args)
    {
        // Never call StateHasChanged in AppointmentRender - would lead to infinite loop

        if (args.Data.IsHoliday )
        {
            args.Attributes["style"] = "background: red";
        }

    }

    void CalendarChanged()
    {
        scheduler.Reload();
    }

}
