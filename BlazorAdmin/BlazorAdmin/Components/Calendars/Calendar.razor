@page "/calendar"

@using BlazorAdmin.Components.test
@using CalendarDomain
@using Radzen
@using Radzen.Blazor
@inject CalendarApiService service
@rendermode InteractiveServer
<h3>Calendar</h3>
@inject DialogService DialogService


<RadzenScheduler @ref=@scheduler SlotRender=@OnSlotRender style="height: 768px;" TItem="Appointment" LoadData="@OnLoadData" Data=@_events
                 StartProperty="Start" EndProperty="End"
                 TextProperty="Text" SlotSelect=@OnSlotSelect>
    <RadzenYearView />
    <RadzenMonthView />
</RadzenScheduler>




@code {
    RadzenScheduler<Appointment> scheduler;

    List<Appointment> _events = new List<Appointment>();



    void OnSlotRender(SchedulerSlotRenderEventArgs args)
    {
        // Highlight today in month view
        if (args.View.Text == "Month" && args.Start.Date == DateTime.Today)
        {
            args.Attributes["style"] = "background: rgba(255,220,40,.2);";
        }
    }

    async Task OnLoadData(SchedulerLoadDataEventArgs args)
    {
        // Get the appointments for between the Start and End
        var t = await service.GetEventsAsync("DEFAULT_TRADING_SYSTEM", DateTime.Now.AddDays(-30), DateTime.Now.AddDays(30));
        _events.Clear();
        foreach (var item in t)
        {
            var entry = new Appointment()
            {
                Start = item.Date,
                End = item.Date,
                Text = item.Description
            };
            _events.Add(entry);

        }
    }

    async Task OnSlotSelect(SchedulerSlotSelectEventArgs args)
    {

        BlazorAdmin.DateEvent data = await DialogService.OpenAsync<AddEvent>("Add Event");

        if (data != null && data.Description !=null)
        {
            var entry = new EventDto()
                {
                    Date = data.Date,
                    Description = data.Description,
                    IsHoliday = data.IsHoliday
                };
            await service.AddEventAsync("AtiKala", entry);


            await scheduler.Reload();
        }

    }



}
